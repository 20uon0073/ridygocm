type User
  @model
  @auth(rules: [{ allow: owner, operations: [create, read, update, delete] }])
{
  id: ID! @primaryKey
  username: String!
  email: String!
  orders: [Order] @hasMany(indexName: "byUser")
  car: Car @hasOne
}

type Car
  @model
  @auth(rules: [{ allow: owner, operations: [create, read, update, delete] }])
  @key(name: "byUser", fields: ["userId"])
{
  id: ID! @primaryKey
  type: String!
  latitude: Float
  longitude: Float
  heading: Float
  isActive: Boolean
  orders: [Order] @hasMany(indexName: "byCar")
  userId: ID!
  user: User @belongsTo(fields: ["userId"])
}

type Order
  @model
  @key(name: "byUser", fields: ["userId"])
  @key(name: "byCar", fields: ["carId", "createdAt"])
  @auth(rules: [{ allow: owner, operations: [create, read, update, delete] }])
{
  id: ID! @primaryKey
  createdAt: String!
  
  type: String!
  status: String

  originLatitude: Float!
  originLongitude: Float!

  destLatitude: Float!
  destLongitude: Float!

  userId: ID!
  user: User @belongsTo(fields: ["userId"])

  carId: ID!
  car: Car @belongsTo(fields: ["carId"])
}
