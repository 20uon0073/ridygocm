type User {
  id: ID!
  username: String!
  email: String!
  orders(filter: ModelOrderFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelOrderConnection
  car: Car
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Car {
  id: ID!
  type: String!
  latitude: Float
  longitude: Float
  heading: Float
  isActive: Boolean
  orders(createdAt: ModelStringKeyConditionInput, filter: ModelOrderFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelOrderConnection
  userId: ID!
  user: User
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Order {
  id: ID!
  createdAt: String!
  type: String!
  status: String
  originLatitude: Float!
  oreiginLongitude: Float!
  destLatitude: Float!
  destLongitude: Float!
  userId: ID!
  user: User
  carId: ID!
  car: Car
  updatedAt: AWSDateTime!
}

type Subscription {
  onOrderUpdated(id: ID!): Order @aws_subscribe(mutations: ["updateOrder"])
  onCarUpdated(id: ID!): Car @aws_subscribe(mutations: ["updateCar"])
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateCar: Car @aws_subscribe(mutations: ["createCar"])
  onUpdateCar: Car @aws_subscribe(mutations: ["updateCar"])
  onDeleteCar: Car @aws_subscribe(mutations: ["deleteCar"])
  onCreateOrder: Order @aws_subscribe(mutations: ["createOrder"])
  onUpdateOrder: Order @aws_subscribe(mutations: ["updateOrder"])
  onDeleteOrder: Order @aws_subscribe(mutations: ["deleteOrder"])
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]!
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelUserFilterInput {
  id: ModelIDInput
  username: ModelStringInput
  email: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getCar(id: ID!): Car
  listCars(filter: ModelCarFilterInput, limit: Int, nextToken: String): ModelCarConnection
  getOrder(id: ID!): Order
  listOrders(filter: ModelOrderFilterInput, limit: Int, nextToken: String): ModelOrderConnection
}

input CreateUserInput {
  id: ID
  username: String!
  email: String!
}

input UpdateUserInput {
  id: ID!
  username: String
  email: String
}

input DeleteUserInput {
  id: ID!
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createCar(input: CreateCarInput!, condition: ModelCarConditionInput): Car
  updateCar(input: UpdateCarInput!, condition: ModelCarConditionInput): Car
  deleteCar(input: DeleteCarInput!, condition: ModelCarConditionInput): Car
  createOrder(input: CreateOrderInput!, condition: ModelOrderConditionInput): Order
  updateOrder(input: UpdateOrderInput!, condition: ModelOrderConditionInput): Order
  deleteOrder(input: DeleteOrderInput!, condition: ModelOrderConditionInput): Order
}

input ModelUserConditionInput {
  username: ModelStringInput
  email: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type ModelCarConnection {
  items: [Car]!
  nextToken: String
}

input ModelCarFilterInput {
  id: ModelIDInput
  type: ModelStringInput
  latitude: ModelFloatInput
  longitude: ModelFloatInput
  heading: ModelFloatInput
  isActive: ModelBooleanInput
  userId: ModelIDInput
  and: [ModelCarFilterInput]
  or: [ModelCarFilterInput]
  not: ModelCarFilterInput
}

input CreateCarInput {
  id: ID
  type: String!
  latitude: Float
  longitude: Float
  heading: Float
  isActive: Boolean
  userId: ID!
}

input UpdateCarInput {
  id: ID!
  type: String
  latitude: Float
  longitude: Float
  heading: Float
  isActive: Boolean
  userId: ID
}

input DeleteCarInput {
  id: ID!
}

input ModelCarConditionInput {
  type: ModelStringInput
  latitude: ModelFloatInput
  longitude: ModelFloatInput
  heading: ModelFloatInput
  isActive: ModelBooleanInput
  userId: ModelIDInput
  and: [ModelCarConditionInput]
  or: [ModelCarConditionInput]
  not: ModelCarConditionInput
}

type ModelOrderConnection {
  items: [Order]!
  nextToken: String
}

input ModelOrderFilterInput {
  id: ModelIDInput
  createdAt: ModelStringInput
  type: ModelStringInput
  status: ModelStringInput
  originLatitude: ModelFloatInput
  oreiginLongitude: ModelFloatInput
  destLatitude: ModelFloatInput
  destLongitude: ModelFloatInput
  userId: ModelIDInput
  carId: ModelIDInput
  and: [ModelOrderFilterInput]
  or: [ModelOrderFilterInput]
  not: ModelOrderFilterInput
}

input CreateOrderInput {
  id: ID
  createdAt: String
  type: String!
  status: String
  originLatitude: Float!
  oreiginLongitude: Float!
  destLatitude: Float!
  destLongitude: Float!
  userId: ID!
  carId: ID!
}

input UpdateOrderInput {
  id: ID!
  createdAt: String
  type: String
  status: String
  originLatitude: Float
  oreiginLongitude: Float
  destLatitude: Float
  destLongitude: Float
  userId: ID
  carId: ID
}

input DeleteOrderInput {
  id: ID!
}

input ModelOrderConditionInput {
  createdAt: ModelStringInput
  type: ModelStringInput
  status: ModelStringInput
  originLatitude: ModelFloatInput
  oreiginLongitude: ModelFloatInput
  destLatitude: ModelFloatInput
  destLongitude: ModelFloatInput
  userId: ModelIDInput
  carId: ModelIDInput
  and: [ModelOrderConditionInput]
  or: [ModelOrderConditionInput]
  not: ModelOrderConditionInput
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}
